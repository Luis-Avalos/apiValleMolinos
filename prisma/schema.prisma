generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model conductores {
  id              Int        @id @default(autoincrement())
  nombre          String     @db.VarChar(100)
  apellido        String     @db.VarChar(100)
  email           String     @unique @db.VarChar(150)
  password_hash   String
  telefono        String?    @db.VarChar(15)
  curp            String?    @unique @db.VarChar(18)
  foto_perfil_url String?
  fecha_registro  DateTime?  @default(now()) @db.Timestamp(6)
  rol             String?    @db.VarChar
  unidades        unidades[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model historial_pasajeros {
  id            Int       @id @default(autoincrement())
  vuelta_id     Int
  accion        String    @db.VarChar(10)
  cantidad      Int?      @default(1)
  registrado_en DateTime? @default(now()) @db.Timestamp(6)
  vueltas       vueltas   @relation(fields: [vuelta_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notificaciones {
  id                  Int                  @id @default(autoincrement())
  usuario_id          Int?
  titulo              String               @db.VarChar(200)
  mensaje             String
  leido               Boolean?             @default(false)
  fecha               DateTime?            @default(now()) @db.Timestamp(6)
  usuarios_ciudadanos usuarios_ciudadanos? @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model rutas {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(100)
  descripcion String?
  puntos_json Json?
  creado_en   DateTime? @default(now()) @db.Timestamp(6)
  viajes      viajes[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model unidades {
  id               Int          @id @default(autoincrement())
  numero_economico String       @unique @db.VarChar(20)
  placas           String?      @db.VarChar(20)
  capacidad        Int
  estado           String?      @default("activo") @db.VarChar(20)
  conductor_id     Int?
  foto_url         String?
  creado_en        DateTime?    @default(now()) @db.Timestamp(6)
  conductores      conductores? @relation(fields: [conductor_id], references: [id], onUpdate: NoAction)
  viajes           viajes[]
}

model usuarios_ciudadanos {
  id              Int              @id @default(autoincrement())
  nombre          String           @db.VarChar(100)
  apellido        String           @db.VarChar(100)
  curp            String           @unique @db.VarChar(18)
  email           String           @unique @db.VarChar(150)
  telefono        String?          @unique @db.VarChar(15)
  password_hash   String
  foto_perfil_url String?
  fecha_registro  DateTime?        @default(now()) @db.Timestamp(6)
  rol             String?          @db.VarChar
  notificaciones  notificaciones[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model viajes {
  id                        Int       @id @default(autoincrement())
  unidad_id                 Int?
  ruta_id                   Int?
  fecha                     DateTime  @db.Date
  hora_inicio               DateTime  @db.Time(6)
  hora_fin                  DateTime  @db.Time(6)
  total_vueltas_programadas Int?      @default(1)
  vueltas_completadas       Int?      @default(0)
  pasajeros_actuales        Int?      @default(0)
  estado                    String?   @default("pendiente") @db.VarChar(20)
  creado_en                 DateTime? @default(now()) @db.Timestamp(6)
  rutas                     rutas?    @relation(fields: [ruta_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  unidades                  unidades? @relation(fields: [unidad_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vueltas                   vueltas[]
}

model vueltas {
  id                   Int                   @id @default(autoincrement())
  viaje_id             Int
  numero_vuelta        Int
  hora_inicio_estimada DateTime              @db.Time(6)
  hora_fin_estimada    DateTime              @db.Time(6)
  completada           Boolean?              @default(false)
  creado_en            DateTime?             @default(now()) @db.Timestamp(6)
  historial_pasajeros  historial_pasajeros[]
  viajes               viajes                @relation(fields: [viaje_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model password_resets_conductores {
  id         Int      @id(map: "password_resets_muc_pkey") @default(autoincrement())
  email      String   @db.VarChar(255)
  codigo     String   @db.VarChar(6)
  expires_at DateTime @db.Timestamp(6)
  used       Boolean? @default(false)
}
